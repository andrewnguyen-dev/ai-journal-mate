// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SUPERVISOR
  STUDENT
}

enum ConversationType {
  DIARY
  REFLECTION_REPORT
}

enum SenderRole {
  function
  system
  user
  assistant
  data
  tool
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  studentId     String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  role          UserRole  @default(STUDENT)
  lastLogin     DateTime?
  semesterId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  conversations Conversation[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Week {
  id          String   @id
  title       String
  description String
  fromDate    DateTime
  toDate      DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  conversations Conversation[]
  questions     Question[]
}

model Question {
  id            String   @id @default(cuid())
  questionText  String
  order         Int
  systemMessage String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  week   Week   @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId String
}

model Conversation {
  id          String           @id @default(cuid())
  grade       Float?
  summary     String?
  feedback    String?
  markedDate  DateTime?
  type        ConversationType
  isDraft     Boolean          @default(true)
  semesterId  String
  openDate    DateTime? // Open and Close dates for each student diary, last for 1 week
  closeDate   DateTime?
  submittedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  week     Week      @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId   String
  messages Message[]

  @@unique([userId, weekId, semesterId])
}

model Message {
  id          String     @id
  messageText String
  sender      SenderRole
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
}
